---
- name: Print all available facts
  # ansible localhost -m ansible.builtin.setup
  ansible.builtin.debug:
    var: ansible_facts

- name: Check internet connectivity
  ansible.builtin.uri:
    timeout: 5
    url: https://google.com
  failed_when: false

- name: Read device information (always use unit when probing)
  parted: device="{{ install_device }}" unit=GiB
  register: install_device_info
- name: Check {{ install_device }} is clean
  ansible.builtin.fail:
    msg: The system may not be installed, {{ install_device }} is not empty
  when: install_device_info.partitions != []

- name: Create a new primary partition with a size of 1GiB
  parted:
    device: "{{ install_device }}"
    number: 1
    label: gpt
    state: present
    part_end: 1GiB
    flags: [esp]
- name: Create a new primary partition for LVM
  when: not safe_disk_space_at_the_end|bool
  parted:
    device: "{{ install_device }}"
    number: 2
    label: gpt
    flags: [lvm]
    state: present
    part_start: 16GiB
- name: Create a new primary partition for LVM
  when: safe_disk_space_at_the_end|bool
  parted:
    device: "{{ install_device }}"
    number: 2
    label: gpt
    flags: [lvm]
    state: present
    part_start: 16GiB
    part_end: -20GiB

- name: Create and open the LUKS2 container on {{ install_device }}2
  when: install_encrypt|bool
  community.crypto.luks_device:
    device: "{{ install_device }}2"
    label: lvm-encrypted{{ install_suffix }}
    name: lvm-encrypted{{ install_suffix }}
    passphrase: "{{ userpass }}"
    state: opened
    type: luks2
- name: Create a volume group on top of /dev/mapper/lvm-encrypted{{ install_suffix }}
  when: install_encrypt|bool
  lvg: vg=vg-arch{{ install_suffix }} pvs=/dev/mapper/lvm-encrypted{{ install_suffix }}

- name: Create a volume group on top of {{ install_device }}2
  when: not install_encrypt|bool
  lvg: vg=vg-arch{{ install_suffix }} pvs="{{ install_device }}2"

- name: Create root logical volume
  lvol: vg=vg-arch{{ install_suffix }} lv=root size="{{ install_root_size }}"
- name: Create swap logical volume
  lvol: vg=vg-arch{{ install_suffix }} lv=swap size="{{ install_swap_size }}"
- name: Create home logical volume
  lvol: vg=vg-arch{{ install_suffix }} lv=home size="{{ install_home_size }}"

- name: Create a EFI filesystem on {{ install_device }}1
  filesystem: dev="{{ install_device }}1" fstype=vfat opts="-n EFI{{ install_suffix }}"
- name: Create a root filesystem on vg-arch-root{{ install_suffix }}
  filesystem: dev=/dev/vg-arch{{ install_suffix }}/root fstype=btrfs opts="-L root{{ install_suffix }}"
- name: Create a swap filesystem on vg-arch-swap{{ install_suffix }}
  filesystem: dev=/dev/vg-arch{{ install_suffix }}/swap fstype=swap opts="-L swap{{ install_suffix }}"
- name: Create a home filesystem on vg-arch-home{{ install_suffix }}
  filesystem: dev=/dev/vg-arch{{ install_suffix }}/home fstype=btrfs opts="-L home{{ install_suffix }}"

- name: Prepare btrfs root partition
  ansible.builtin.script: prepare-btrfs-root.sh "root{{ install_suffix }}" '@'
- name: Prepare btrfs home partition
  ansible.builtin.script: prepare-btrfs-home.sh "home{{ install_suffix }}" '@'

- name: Mount root subvolume structure /
  mount: fstype=btrfs state=mounted src=LABEL=root{{ install_suffix }} opts=subvol=@/.snapshots/init/snapshot path=/mnt
- name: Mount root subvolume structure /srv
  mount: fstype=btrfs state=mounted src=LABEL=root{{ install_suffix }} opts=subvol=@/srv path=/mnt/srv
- name: Mount root subvolume structure /var
  mount: fstype=btrfs state=mounted src=LABEL=root{{ install_suffix }} opts=subvol=@/var path=/mnt/var
- name: Mount root subvolume structure /.snapshots
  mount: fstype=btrfs state=mounted src=LABEL=root{{ install_suffix }} opts=subvol=@/.snapshots path=/mnt/.snapshots
- name: Mount home subvolume structure /home
  mount: fstype=btrfs state=mounted src=LABEL=home{{ install_suffix }} opts=subvol=@/.snapshots/init/snapshot path=/mnt/home
- name: Mount home subvolume structure /home/.snapshots
  mount: fstype=btrfs state=mounted src=LABEL=home{{ install_suffix }} opts=subvol=@/.snapshots path=/mnt/home/.snapshots
- name: Mount esp partition
  mount: fstype=vfat state=mounted src=LABEL=EFI{{ install_suffix }} path=/mnt/boot

- name: Checkout ansible scripts
  ansible.builtin.git:
    repo: https://github.com/andrew-grechkin/ansible-arch.git
    dest: /mnt/root/git/private/ansible-arch
  ignore_errors: true

- name: Update pacman mirrors
  ansible.builtin.command: reflector --country "{{ install_pacman_mirror_country }}" --latest 8 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
  args:
    creates: /root/.cache/mirrorstatus.json

- name: Run pacstrap
  ansible.builtin.command: pacstrap /mnt base linux linux-firmware sudo cryptsetup lvm2 mdadm btrfs-progs refind avahi nss-mdns systemd-resolvconf inetutils networkmanager zsh tmux git vifm vim make
  args:
    creates: /mnt/etc/pacman.conf

- name: Copy fstab
  ansible.builtin.copy: src=fstab dest=/mnt/etc/fstab owner=root group=root mode='0644'

- name: Create resolved.conf.d directory
  ansible.builtin.file:
    path: /mnt/etc/systemd/resolved.conf.d
    state: directory
    owner: root
    group: root
    mode: '0775'

- name: Copy resolved overrides
  ansible.builtin.copy: src=etc/systemd/resolved.conf.d/50-override.conf dest=/mnt/etc/systemd/resolved.conf.d/50-override.conf owner=root group=root mode='0644'

- name: Install rEFInd
  ansible.builtin.script: install-refind.sh "{{ install_encrypt|bool }}" "{{ install_suffix }}"
  args:
    creates: /boot/refind_linux.conf

- name: Copy refind additional files
  synchronize:
    src: refind
    dest: /mnt/boot/EFI/
    archive: false
    compress: false
    recursive: true

- name: Use pacman mirrorlist
  ansible.builtin.command: cp -f /etc/pacman.d/mirrorlist /mnt/etc/pacman.d

- name: Post install
  ansible.builtin.script: post-install.sh "{{ username }}" "{{ useruid }}" "{{ userpass }}"
  args:
    creates: /mnt/etc/locale.conf

- name: Update initcpio
  ansible.builtin.script: update-initcpio.sh "{{ install_encrypt|bool }}"

- name: Unmount all
  ansible.builtin.command: umount -R /mnt
