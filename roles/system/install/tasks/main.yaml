---
# ansible localhost -m ansible.builtin.setup
- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

- name: Check internet connectivity
  ansible.builtin.uri:
    timeout: 5
    url: https://google.com
  failed_when: false

- name: Read device information (always use unit when probing) {{ install_device }}
  community.general.parted:
    device: '{{ install_device }}'
    unit: GiB
  register: install_device_info
- name: Check if device is clean {{ install_device }}
  ansible.builtin.fail:
    msg: The system may not be installed, {{ install_device }} is not empty
  when: install_device_info.partitions != []

- name: Create a new primary partition with a size of 1GiB
  community.general.parted:
    device: '{{ install_device }}'
    number: 1
    label: gpt
    state: present
    part_end: 1GiB
    flags: [esp]
- name: Create a new primary partition for LVM
  when: not safe_disk_space_at_the_end | bool
  community.general.parted:
    device: '{{ install_device }}'
    number: 2
    label: gpt
    flags: [lvm]
    state: present
    part_start: 16GiB
- name: Create a new primary partition for LVM
  when: safe_disk_space_at_the_end | bool
  community.general.parted:
    device: '{{ install_device }}'
    number: 2
    label: gpt
    flags: [lvm]
    state: present
    part_start: 16GiB
    part_end: -20GiB

- name: Create and open the LUKS2 container on 2 {{ install_device }}
  when: install_encrypt | bool
  community.crypto.luks_device:
    device: '{{ install_device }}2'
    label: lvm-encrypted{{ install_suffix }}
    name: lvm-encrypted{{ install_suffix }}
    passphrase: '{{ userpass }}'
    state: opened
    type: luks2
- name: Create a volume group on top of /dev/mapper/lvm-encrypted{{ install_suffix }}
  when: install_encrypt | bool
  community.general.lvg:
    pvs: /dev/mapper/lvm-encrypted{{ install_suffix }}
    vg: vg-arch{{ install_suffix }}

- name: Create a volume group on top of 2 {{ install_device }}
  when: not install_encrypt | bool
  community.general.lvg:
    vg: vg-arch{{ install_suffix }}
    pvs: '{{ install_device }}2'

- name: Create root logical volume
  community.general.lvol:
    lv: root
    size: '{{ install_root_size }}'
    vg: vg-arch{{ install_suffix }}
- name: Create swap logical volume
  community.general.lvol:
    lv: swap
    size: '{{ install_swap_size }}'
    vg: vg-arch{{ install_suffix }}
- name: Create home logical volume
  community.general.lvol:
    lv: home
    size: '{{ install_home_size }}'
    vg: vg-arch{{ install_suffix }}

- name: Create a EFI filesystem on 1 {{ install_device }}
  community.general.filesystem:
    dev: '{{ install_device }}1'
    fstype: vfat
    opts: -n EFI{{ install_suffix }}
- name: Create a root filesystem on vg-arch-root{{ install_suffix }}
  community.general.filesystem:
    dev: /dev/vg-arch{{ install_suffix }}/root
    fstype: btrfs
    opts: -L root{{ install_suffix }}
- name: Create a swap filesystem on vg-arch-swap{{ install_suffix }}
  community.general.filesystem:
    dev: /dev/vg-arch{{ install_suffix }}/swap
    fstype: swap
    opts: -L swap{{ install_suffix }}
- name: Create a home filesystem on vg-arch-home{{ install_suffix }}
  community.general.filesystem:
    dev: /dev/vg-arch{{ install_suffix }}/home
    fstype: btrfs
    opts: -L home{{ install_suffix }}

- name: Prepare btrfs root partition
  ansible.builtin.script: prepare-btrfs-root.sh "root{{ install_suffix }}" '@'
- name: Prepare btrfs home partition
  ansible.builtin.script: prepare-btrfs-home.sh "home{{ install_suffix }}" '@home'

- name: Mount root subvolume structure /
  ansible.posix.mount:
    fstype: btrfs
    opts: subvol=@/.snapshots/init/snapshot
    path: /mnt
    src: LABEL=root{{ install_suffix }}
    state: ephemeral
- name: Mount root subvolume structure /srv
  ansible.posix.mount:
    fstype: btrfs
    state: mounted
    src: LABEL=root{{ install_suffix }}
    opts: subvol=@/srv
    path: /mnt/srv
- name: Mount root subvolume structure /var
  ansible.posix.mount:
    fstype: btrfs
    opts: subvol=@/var
    path: /mnt/var
    src: LABEL=root{{ install_suffix }}
    state: mounted
- name: Mount root subvolume structure /.snapshots
  ansible.posix.mount:
    fstype: btrfs
    opts: subvol=@/.snapshots
    path: /mnt/.snapshots
    src: LABEL=root{{ install_suffix }}
    state: mounted
- name: Mount home subvolume structure /home
  ansible.posix.mount:
    fstype: btrfs
    opts: subvol=@home/.snapshots/init/snapshot
    path: /mnt/home
    src: LABEL=home{{ install_suffix }}
    state: mounted
- name: Mount home subvolume structure /home/.snapshots
  ansible.posix.mount:
    fstype: btrfs
    opts: subvol=@home/.snapshots
    path: /mnt/home/.snapshots
    src: LABEL=home{{ install_suffix }}
    state: mounted
- name: Mount esp partition
  ansible.posix.mount:
    fstype: vfat
    path: /mnt/boot
    src: LABEL=EFI{{ install_suffix }}
    state: mounted

- name: Update pacman mirrors
  ansible.builtin.command: >
    reflector --country "{{ install_pacman_mirror_country }}" --latest 8 --protocol http  --protocol https
    --sort rate --save /etc/pacman.d/mirrorlist
  args:
    creates: /root/.cache/mirrorstatus.json

- name: Run pacstrap
  ansible.builtin.command: >
    pacstrap /mnt
    base base-devel linux linux-firmware refind
    btrfs-progs cryptsetup lvm2 mdadm
    avahi bind inetutils networkmanager nss-mdns openssh systemd-resolvconf
    grml-zsh-config git tmux vifm vim zsh zsh-completions
    ansible
  args:
    creates: /mnt/etc/pacman.conf

- name: Copy fstab
  ansible.builtin.copy:
    dest: /mnt/etc/fstab
    group: root
    mode: '0644'
    owner: root
    src: fstab

# - name: Create resolved.conf.d directory
#   ansible.builtin.file:
#     group: root
#     mode: '0775'
#     owner: root
#     path: /mnt/etc/systemd/resolved.conf.d
#     state: directory
# - name: Copy resolved overrides
#   ansible.builtin.copy:
#     dest: /mnt/etc/systemd/resolved.conf.d/50-override.conf
#     group: root
#     mode: '0644'
#     owner: root
#     src: etc/systemd/resolved.conf.d/50-override.conf

- name: Install rEFInd
  ansible.builtin.script: install-refind.sh "{{ install_encrypt | bool }}" "{{ install_suffix }}"
  args:
    creates: /boot/refind_linux.conf

- name: Copy refind additional files
  ansible.posix.synchronize:
    archive: false
    compress: false
    dest: /mnt/boot/EFI/
    recursive: true
    src: refind

- name: Use pacman mirrorlist
  ansible.builtin.command: cp -f /etc/pacman.d/mirrorlist /mnt/etc/pacman.d
  args:
    creates: /mnt/etc/pacman.d/mirrorlist

- name: Post install
  ansible.builtin.script: >
    post-install.sh
    "{{ username }}" "{{ useruid }}" "{{ userpass }}"
    "{{ default_hostname }}" "{{ default_locale }}" "{{ default_timezone }}"
  args:
    creates: /mnt/etc/locale.conf

- name: Update initcpio
  ansible.builtin.script: update-initcpio.sh "{{ install_encrypt | bool }}"

- name: Create /efi directory
  become: true
  ansible.builtin.file:
    path: /mnt/efi
    owner: root
    group: root
    state: directory
    mode: '0755'
- name: Unmount esp partition from /boot
  ansible.builtin.command: umount -R /mnt/boot
  args:
    removes: /mnt/boot/vmlinuz-linux
- name: Mount esp partition to /efi
  ansible.posix.mount:
    fstype: vfat
    path: /mnt/efi
    src: LABEL=EFI{{ install_suffix }}
    fstab: /mnt/etc/fstab
    state: mounted
- name: Copy /efi to /boot
  become: true
  ansible.posix.synchronize:
    dest: /mnt/boot/
    src: /mnt/efi/
- name: Copy pacman hook
  become: true
  ansible.builtin.copy:
    dest: /mnt/usr/share/libalpm/hooks/99-kernel-propagate-efi.hook
    mode: '0644'
    owner: root
    group: root
    src: 99-kernel-propagate-efi.hook
# - name: Copy mount files
#   become: true
#   ansible.builtin.copy:
#     dest: /mnt/etc/systemd/system/{{ item }}
#     mode: '0644'
#     owner: root
#     group: root
#     src: '{{ item }}'
#   with_items: [efi.automount, efi.mount]
# - name: Finalize
#   ansible.builtin.script: >
#     finalize.sh
#     "{{ username }}" "{{ useruid }}" "{{ userpass }}"
#     "{{ default_hostname }}" "{{ default_locale }}" "{{ default_timezone }}"
# - name: Enable automounts
#   become: true
#   ansible.builtin.service:
#     name: '{{ item }}'
#     enabled: true
#   with_items:
#     - efi.automount

- name: Checkout ansible scripts
  ansible.builtin.git:
    dest: /mnt/home/{{ username }}/git/private/ansible-arch
    repo: https://github.com/andrew-grechkin/ansible-arch.git
    version: master
  environment:
    GIT_TERMINAL_PROMPT: '0'
- name: Change owner of the files
  ansible.builtin.command: chown -R "{{ useruid }}:{{ useruid }}" "/mnt/home/{{ username }}/git"
  changed_when: false

# - name: Unmount all
#   ansible.builtin.command: umount -R /mnt
#   args:
#     removes: /mnt/root
