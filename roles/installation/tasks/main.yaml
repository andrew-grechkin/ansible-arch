---
- name: Read device information (always use unit when probing)
  parted: device="{{install_device}}" unit=GiB
  register: install_device_info
- name: Check {{install_device}} is clean
  when: install_device_info.partitions != []
  fail:
    msg: The system may not be installed, {{install_device}} is not empty

- name: Create a new primary partition with a size of 1GiB
  parted:
    device: "{{install_device}}"
    number: 1
    label: gpt
    state: present
    part_end: 1025MiB
    flags: [esp]
- name: Create the second primary partition with a size of 1GiB
  parted:
    device: "{{install_device}}"
    number: 2
    label: gpt
    state: present
    part_start: 1025MiB
    part_end: 2049MiB
- name: Create a new primary partition for LVM
  parted:
    device: "{{install_device}}"
    number: 3
    label: gpt
    flags: [lvm]
    state: present
    part_start: 2049MiB

- name: Create and open the LUKS2 container
  when: install_encrypt
  community.crypto.luks_device:
    device: "{{install_device}}"
    label: lvm-encrypted
    name: lvm-encrypted
    passphrase: empty
    state: opened
    type: luks2
- name: Create a volume group on top of /dev/mapper/lvm-encrypted
  when: install_encrypt
  lvg: vg=vg-arch pvs=/dev/mapper/lvm-encrypted

- name: Create a volume group on top of {{install_device}}3
  when: not install_encrypt
  lvg: vg=vg-arch pvs="{{install_device}}3"

- name: Create root logical volume
  lvol: vg=vg-arch lv=root size="{{install_root_size}}"
- name: Create swap logical volume
  lvol: vg=vg-arch lv=swap size="{{install_swap_size}}"
- name: Create home logical volume
  lvol: vg=vg-arch lv=home size="{{install_home_size}}"

- name: Create a EFI filesystem on {{install_device}}1
  filesystem: dev="{{install_device}}1" fstype=vfat opts='-n EFI'
- name: Create a root filesystem on vg-arch-root
  filesystem: dev=/dev/vg-arch/root fstype=btrfs opts='-L root'
- name: Create a swap filesystem on vg-arch-swap
  filesystem: dev=/dev/vg-arch/swap fstype=swap opts='-L swap'
- name: Create a home filesystem on vg-arch-home
  filesystem: dev=/dev/vg-arch/home fstype=btrfs opts='-L home'

- name: Prepare btrfs root partition
  script: prepare-btrfs-root.sh root '@'
- name: Prepare btrfs home partition
  script: prepare-btrfs-home.sh home '@'

- name: Mount root subvolume structure /
  mount: fstype=btrfs state=mounted src=LABEL=root opts=subvol=@/.snapshots/init/snapshot path=/mnt
- name: Mount root subvolume structure /opt
  mount: fstype=btrfs state=mounted src=LABEL=root opts=subvol=@/opt path=/mnt/opt
- name: Mount root subvolume structure /srv
  mount: fstype=btrfs state=mounted src=LABEL=root opts=subvol=@/srv path=/mnt/srv
- name: Mount root subvolume structure /var
  mount: fstype=btrfs state=mounted src=LABEL=root opts=subvol=@/var path=/mnt/var
- name: Mount root subvolume structure /.snapshots
  mount: fstype=btrfs state=mounted src=LABEL=root opts=subvol=@/.snapshots path=/mnt/.snapshots
- name: Mount home subvolume structure /home
  mount: fstype=btrfs state=mounted src=LABEL=home opts=subvol=@/.snapshots/init/snapshot path=/mnt/home
- name: Mount home subvolume structure /home/.snapshots
  mount: fstype=btrfs state=mounted src=LABEL=home opts=subvol=@/.snapshots path=/mnt/home/.snapshots
- name: Mount esp partition
  mount: fstype=vfat state=mounted src=LABEL=EFI path=/mnt/boot

- name: Checkout ansible scripts
  git:
    repo: https://github.com/andrew-grechkin/ansible-arch.git
    dest: /mnt/root/git/private/ansible-arch
  ignore_errors: true

- name: Update pacman mirrors
  shell: reflector --country "{{install_pacman_mirror_country}}" --latest 8 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
  args:
    creates: /root/.cache/mirrorstatus.json

- name: Run pacstrap
  shell: pacstrap /mnt base linux linux-firmware sudo cryptsetup lvm2 mdadm btrfs-progs refind avahi nss-mdns systemd-resolvconf inetutils networkmanager zsh
  args:
    creates: /mnt/etc/pacman.conf

- name: Install rEFInd
  script: install-refind.sh "{{install_encrypt}}"
  args:
    creates: /boot/refind_linux.conf

- name: Copy fstab
  copy: src=fstab dest=/mnt/etc/fstab owner=root group=root mode='0644'

- name: Use pacman mirrorlist
  shell: cp -f /etc/pacman.d/mirrorlist /mnt/etc/pacman.d

- name: Post install
  script: post-install.sh
  args:
    creates: /mnt/etc/locale.conf

- name: Update initcpio
  script: update-initcpio.sh "{{install_encrypt}}"

- name: Unmount all
  shell: umount -R /mnt
